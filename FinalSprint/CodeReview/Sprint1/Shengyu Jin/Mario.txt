Reviewer: Shengyu Jin
Date: 9/23/2019
Sprint1
Files: ActionState.cs, Mario.cs, MarioAction.cs, MarioPower.cs, PowerState.cs
Author: Zhenhao Lu
Comments:
	1. Excellent strategy to apply the State Pattern to both Mario's Power and Mario's Action implementing.
	2. Great flows of logic in dealing with the State Pattern and the Command Pattern.
	3. Great arrangement on listing all possible states and actions in the enum type.
	4. Methods in ActionState Interface are sufficient while the ones in PowerState raise my concern 
	(i.e. the Leave method which gets implemented only once is never a good method to put in the interface)
	5. the Mario class appears to be a big class, and it may need to be decomposed if we are going to add other behaviors.
Review Time: 30 min
Hypothesis: There is likely to be only one Mario instance (For multiplayer we can build another mostly identical class named Luigi with some minor changes, like a different super power).
	   Under this assumption, it is prone to introduce the Singleton Pattern to the development, which secures the only one instance for the Mario Class, and enable external classes to have
	   the access to the Mario methods without passing the Mario around. And it will be of great help to decompose the Mario Class. For now, I treat the Mario as a property of the Game to obtain it from my block classes.
